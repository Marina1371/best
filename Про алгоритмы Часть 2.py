a = [19, 22, 16, 44, 21, 34, 55, 12, 45]

# Хотим узнать, есть ли в нём какой-то элемент
print(21 in a)  # встроенный способ есть
# где не работает:
# * если то, что стоит после "in" не поддерживает метод __contains__()
# * если элементы списка не умеют сравнивать себя с искомым элементом (__eq__())
# * если есть более быстрый способ сравнения, чем через __eq__() (например, через хэш)
# * если объекты сравниваются не так просто (например, есть список товаров, а мы сравниваем какой-то их признак)
# * если есть алгоритм, который быстрее стандартного в нашем конкретном случае


# стандартный поиск
# Сложность O(n) в худшем случае,
# O(1), если первый элемент сразу равен искомому
def contains(iterable, value):
    for x in iterable:
        if x == value:
            return True
    return False

# Если у нас список отсортирован, то нам повезло
# Можно сделать бинарный поиск
# O(log(n))
b = [12, 34, 56, 78, 89, 100, 123, 145, 167, 198, 205]
def contains2(iterable, value):
    left = 0
    right = len(iterable) - 1

    while right >= left:
        mid = (left + right) // 2

        print(mid, iterable[mid], iterable[left:right + 1])

        if iterable[mid] == value:
            return True

        if iterable[mid] > value:
            right = mid - 1
        else:
            left = mid + 1

    return False

# Если у нас список отсортирован, и шаг между элементами одинаковый
# то можно сделать O(1)


print(contains2(b, 89))
# left и right - индексы границы
# остановка когда либо нашли число в середине, либо когда left=right


# Хотим найти минимальный или максимальный элемент
print(min(a))  # стандартный способ

# Сложность O(n), если считать операцию "<"
# Сложность от O(n) если список в порядке убывания до O(1) если список в порядке возрастания
def smallest(iterable):
    res = iterable[0]  # предположили
    for x in iterable:
        print(res, x, iterable)
        if x < res:
            res = x
    return res

# Для каких-то частных случаев могут быть более простые алгоритмы
# O(1)
# a[0] или a[-1] если список уже отсортирован

print(smallest(a))

# Хотим отсортировать список по возрастанию или убыванию
